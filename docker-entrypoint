#!/usr/bin/env bash

set -e
set -o pipefail

DOCKER_SOCK=${DOCKER_SOCK:-/var/run/docker.sock}
UNIX_SOCK=""
CURL_TIMEOUT=${CURL_TIMEOUT:-30}

# only use unix domain socket if no TCP endpoint is defined
case "${DOCKER_SOCK}" in
  "tcp://"*) HTTP_ENDPOINT="$(echo ${DOCKER_SOCK} | sed 's#tcp://#http://#')" ;;
  "tcps://"*) HTTP_ENDPOINT="$(echo ${DOCKER_SOCK} | sed 's#tcps://#https://#')"
              CA="--cacert /certs/ca.pem"
              CLIENT_KEY="--key /certs/client-key.pem"
              CLIENT_CERT="--cert /certs/client-cert.pem" ;;
  *)          HTTP_ENDPOINT="http://localhost"
              UNIX_SOCK="--unix-socket ${DOCKER_SOCK}" ;;
esac

AUTOHEAL_EXCLUDE_NAMES=${AUTOHEAL_EXCLUDE_NAMES:-}
AUTOHEAL_START_PERIOD=${AUTOHEAL_START_PERIOD:-0}
AUTOHEAL_INTERVAL=${AUTOHEAL_INTERVAL:-5}
AUTOHEAL_DEFAULT_STOP_TIMEOUT=${AUTOHEAL_DEFAULT_STOP_TIMEOUT:-10}

docker_curl() {
  curl --max-time "${CURL_TIMEOUT}" --no-buffer -s \
  ${CA} ${CLIENT_KEY} ${CLIENT_CERT} \
  ${UNIX_SOCK} \
  "$@"
}

get_container_info() {
  local url
  url="${HTTP_ENDPOINT}/containers/json?filters=\{\"health\":\[\"unhealthy\"\]\}"
  docker_curl "$url"
}

is_container_excluded() {
  local container_name="$1"
  local excluded_names="${AUTOHEAL_EXCLUDE_NAMES}"

  for name in ${excluded_names//,/ }; do
    if [[ "$container_name" == "$name" ]]; then
      return 0
    fi
  done
  return 1
}

restart_container() {
  local container_id="$1"
  local timeout="$2"

  if ! docker_curl -f -X POST "${HTTP_ENDPOINT}/containers/${container_id}/restart?t=${timeout}"; then
    echo "$(date +%d-%m-%Y" "%H:%M:%S) Restarting container ${container_id:0:12} failed" >&2
  fi
}

term_handler() {
  exit 143
}

trap 'term_handler' SIGTERM

if [[ "$1" = "autoheal" ]]; then
  if [[ -n "$UNIX_SOCK" ]] && ! [[ -S "$DOCKER_SOCK" ]]; then
    echo "unix socket is currently not available" >&2
    exit 1
  fi

  if [[ "$AUTOHEAL_START_PERIOD" -gt 0 ]]; then
    echo "Monitoring containers for unhealthy status in $AUTOHEAL_START_PERIOD second(s)"
    sleep "$AUTOHEAL_START_PERIOD"
  fi

  while true; do
    STOP_TIMEOUT=".Labels[\"autoheal.stop.timeout\"] // $AUTOHEAL_DEFAULT_STOP_TIMEOUT"
    if ! get_container_info | jq -r "foreach .[] as \$CONTAINER([];[]; \$CONTAINER | .Id, .Names[0], .State, ${STOP_TIMEOUT})" | while read -r CONTAINER_ID && read -r CONTAINER_NAME && read -r CONTAINER_STATE && read -r TIMEOUT; do
      CONTAINER_SHORT_ID=${CONTAINER_ID:0:12}
      DATE=$(date +%d-%m-%Y" "%H:%M:%S)

      if [[ "$CONTAINER_NAME" = "null" ]]; then
        echo "$DATE Container name of (${CONTAINER_SHORT_ID}) is null, which implies container does not exist - don't restart" >&2
      elif [[ "$CONTAINER_STATE" = "restarting" ]]; then
        echo "$DATE Container $CONTAINER_NAME (${CONTAINER_SHORT_ID}) found to be restarting - don't restart"
      elif is_container_excluded "$CONTAINER_NAME"; then
        echo "$DATE Container $CONTAINER_NAME (${CONTAINER_SHORT_ID}) is excluded from autoheal - don't restart"
      else
        echo "$DATE Container $CONTAINER_NAME (${CONTAINER_SHORT_ID}) found to be unhealthy - Restarting container now with ${TIMEOUT}s timeout"
        restart_container "$CONTAINER_ID" "$TIMEOUT"
      fi
    done; then
      echo "$(date +%d-%m-%Y" "%H:%M:%S) Error processing container info" >&2
    fi

    sleep "$AUTOHEAL_INTERVAL"
  done

else
  exec "$@"
fi
